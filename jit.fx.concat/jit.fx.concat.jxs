<jittershader name="default">
	<description>Default Slab </description>
	<param name="dummyTex" type="int" default="0" />
	<param name="texA" type="int" default="1" />
	<param name="texB" type="int" default="2" />
	<param name="texDimA" type="vec2" state="TEXDIM1" />
	<param name="texDimB" type="vec2" state="TEXDIM2" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="concatdim" type="int" default="0" />
	<language name="glsl" version="1.5">
		<bind param="dummyTex" program="fp" />
		<bind param="texA" program="fp" />
		<bind param="texB" program="fp" />
		<bind param="texDimA" program="fp" />
		<bind param="texDimB" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<bind param="concatdim" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
uniform mat4 texMat;

out jit_PerVertex {
	vec2 uv;
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.uv = (texMat * vec4(uv,0,1)).xy;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 dummyTex, texA, texB;
uniform vec2 texDimA, texDimB;
uniform int concatdim;

in jit_PerVertex {
	vec2 uv;
} jit_in;

void main(void) {

	if(concatdim == 0){
		bool A_or_B = jit_in.uv.x < texDimA.x;
		outColor = A_or_B ? texelFetch(texA, ivec2(jit_in.uv)) : 
							texelFetch(texB, ivec2(jit_in.uv - vec2(texDimA.x, 0)));
	} else {
		bool A_or_B = jit_in.uv.y < texDimA.y;
		outColor = A_or_B ? texelFetch(texA, ivec2(jit_in.uv)) : 
							texelFetch(texB, ivec2(jit_in.uv - vec2(0, texDimA.y)));
	}
}
]]>
</program>
</language>
</jittershader>
