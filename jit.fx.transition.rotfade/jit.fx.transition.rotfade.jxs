<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="texMat1" type="mat4" state="TEXTURE1_MATRIX" />
  	<param name="rotfade" type="float" default="0.0" />
    <param name="texDim0" type="vec2" state="TEXDIM0" />
  	<param name="texDim1" type="vec2" state="TEXDIM1" />
  	<param name="rotation" type="float" default="0.7853981" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat0" program="fp" />
		<bind param="texMat1" program="fp" />
    	<bind param="rotfade" program="vp" />
    	<bind param="texDim0" program="fp" />
 		<bind param="texDim0" program="vp" />
    	<bind param="texDim1" program="fp" />
    	<bind param="texDim1" program="vp" />
    	<bind param="rotation" program="vp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
uniform vec2 texDim0, texDim1;
uniform float rotfade, rotation;

out jit_PerVertex {
	smooth vec2 uv0;
	smooth vec2 uv1;
	flat float ratio0;
	flat float ratio1;
	flat float rotation0;
	flat float rotation1;
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);

	jit_out.ratio0 = texDim0.x / texDim0.y;
	jit_out.ratio1 = texDim1.x / texDim1.y;
	jit_out.uv0 = uv*2 - 1;
	jit_out.uv0 *= vec2(jit_out.ratio0, -1);
	jit_out.uv1 = uv*2 - 1;
	jit_out.uv1 *= vec2(jit_out.ratio1, -1);
	jit_out.rotation0 = rotfade * rotation;
	jit_out.rotation1 = -rotation + rotfade*rotation;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core


layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0, tex1;
uniform mat4 texMat0, texMat1;
uniform float rotfade;
uniform vec2 texDim0, texDim1;

in jit_PerVertex {
	smooth vec2 uv0;
	smooth vec2 uv1;
	flat float ratio0;
	flat float ratio1;
	flat float rotation0;
	flat float rotation1;
} jit_in;

vec2 mirror_repeat(vec2 uv, vec2 texDim){
	uv = mod(uv, texDim*2);
	uv.x = uv.x > texDim.x ? 2 * texDim.x - uv.x - 1 : uv.x;
	uv.y = uv.y > texDim.y ? 2 * texDim.y - uv.y - 1 : uv.y;
	return uv;
}

vec2 car2pol(in vec2 uv){
	return vec2(length(uv), atan(uv.y, uv.x));
}

vec2 pol2car(in vec2 uv){
	return vec2(cos(uv.y), sin(uv.y))*uv.x;
}

void main(void) {

	vec2 polar0 = car2pol(jit_in.uv0);
	vec2 polar1 = car2pol(jit_in.uv1);
	float rotAmt = 3;
	vec2 rot_in_uv = vec2(polar0.x, polar0.y + jit_in.rotation0);
	vec2 rot_out_uv = vec2(polar1.x, polar1.y + jit_in.rotation1);
	rot_in_uv = pol2car(rot_in_uv) / vec2(jit_in.ratio0, 1);
	rot_out_uv = pol2car(rot_out_uv) / vec2(jit_in.ratio1, 1);
	rot_in_uv = texDim0 * ( rot_in_uv * 0.5 + 0.5);
	rot_out_uv = texDim1 * ( rot_out_uv * 0.5 + 0.5);
	rot_in_uv = mirror_repeat(rot_in_uv, texDim0);
	rot_out_uv = mirror_repeat(rot_out_uv, texDim1);
	vec4 a = texture(tex0, rot_in_uv);
	vec4 b = texture(tex1, rot_out_uv);
	float interp = smoothstep(0.2,0.8,rotfade);
	outColor = mix(a, b, interp);

}
]]>
</program>
</language>
</jittershader>
