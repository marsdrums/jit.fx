<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
  <param name="huefade" type="float" default="0.0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
    <bind param="huefade" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
uniform mat4 texMat;

out jit_PerVertex {
	vec2 uv;
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.uv = (texMat * vec4(uv,0,1)).xy;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core


layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0, tex1;
uniform float huefade;

in jit_PerVertex {
	vec2 uv;
} jit_in;

/*
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 */
float rgb2hue(vec3 col) {
  
  float _max = max(max(col.r,col.g),col.b);
  float _min = min(min(col.r,col.g),col.b);
  
  float hue = (_max + _min) / 2;

  if (_max == _min) {
    hue = 0; // achromatic
  }
  else {
    float d = _max - _min;
    
    if (_max == col.r) {
      hue = (col.g - col.b) / d + (col.g < col.b ? 6 : 0);
    }
    else if (_max == col.g) {
      hue = (col.b - col.r) / d + 2;
    }
    else if (_max == col.b) {
      hue = (col.r - col.g) / d + 4;
    }
    
    hue /= 6;
  }

  return hue;
  
}

void main(void) {

	vec4 a = texelFetch(tex0, ivec2(jit_in.uv));
	vec4 b = texelFetch(tex1, ivec2(jit_in.uv));

	float huea = rgb2hue(a.rgb) * (1 - huefade);
	float hueb = rgb2hue(b.rgb) * huefade;

	outColor = huea > hueb ? a : b;

}
]]>
</program>
</language>
</jittershader>
