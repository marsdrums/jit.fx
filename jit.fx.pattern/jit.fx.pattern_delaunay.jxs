<jittershader name="randlines">
  <param name="pos" type="vec3" state="POSITION" />
  <param name="tex0" type="int" default="0" />
  <param name="texDim" type="vec2" state="TEXDIM0" />
  <param name="radius" type="float" default="60.0" />
  <param name="threshold" type="float" default="0.9" />
  <param name="farClip" type="float" state="FAR_CLIP" />
  <param name="texDim" type="vec2" state="TEXDIM0" />
  <param name="randomness" type="float" default="0.05" />
  <param name="num_edges" type="int" default="25" />
  <param name="start_angle" type="float" default="0.0" />
  <param name="complete" type="float" default="1.0" />
  <param name="outdim" type="vec2" default="1920 1080" />
  <language name="glsl" version="1.5">
    <bind param="pos" program="vp" />
    <bind param="tex0" program="gp" />
    <bind param="texDim" program="vp" />
    <bind param="radius" program="gp" />
    <bind param="threshold" program="gp" />
    <bind param="farClip" program="gp" />
    <bind param="texDim" program="gp" />
    <bind param="randomness" program="gp" />
    <bind param="num_edges" program="gp" />
    <bind param="start_angle" program="gp" />
    <bind param="complete" program="gp" />
    <bind param="outdim" program="gp" />
    <program name="vp" type="vertex">
<![CDATA[
#version 330 core
in vec3 pos;

uniform vec2 texDim;

out jit_PerVertex {
  flat vec2 rectPos;  
  flat vec2 uv;
} jit_out;

void main() { 
  gl_Position = vec4(pos.xy*2 - 1, 0., 1.); 
  jit_out.uv = pos.xy;//vec2(pos.x, 1 - pos.y);
  jit_out.rectPos = pos.xy * texDim + 0.5;

}
]]>
    </program>
    <program name="gp" type="geometry">
<![CDATA[
#version 330 core
#define TWOPI 6.2831853072

layout (points) in;
layout (line_strip, max_vertices=3) out;

in jit_PerVertex {
  flat vec2 rectPos;   
  flat vec2 uv;
} jit_in[];

out jit_PerVertex {
  flat float id;  
  smooth float dist;
  //flat vec2 center;
  smooth vec4 color;
};

uniform sampler2DRect tex0;
uniform int frame;
uniform float radius;
uniform float threshold;
uniform float farClip;
uniform vec2 texDim;
uniform float randomness;
uniform int num_edges;
uniform float start_angle;
uniform float complete;
uniform vec2 outdim;


void main() {


    vec2 uv = (gl_in[0].gl_Position.xy * 0.5 + 0.5)*texDim;
    vec4 lookup0 = texelFetch(tex0, ivec2(uv));

    float ratio = texDim.x / texDim.y;
    float id0 = lookup0.r;

    if(id0 == 0.0) return; //if background

    float dist0 = lookup0.g;
    vec2 center0 = lookup0.ba;
    vec2 dir = normalize(gl_in[0].gl_Position.xy*vec2(1,-1) - center0);

    vec4 lookup1 = texelFetch(tex0, ivec2(uv + dir/vec2(ratio, 1.0)));
    float id1 = lookup1.x;

    if(id0 == id1) return; //if the same cell

    vec2 center1 = lookup1.ba;

    if( (center0.x == 0.0 && center0.y == 0.0) || (center1.x == 0.0 && center1.y == 0.0) ) return;

    float centerDist = distance(center0, center1);
    color = vec4(1/(1+centerDist*10));

    gl_Position = vec4(center0, 0.0, 1.0);
    //color = vec4(0.0);
    EmitVertex();

    //gl_Position = vec4(mix(lookup.xy, lookup.zw, 0.5), 0.0, 1.0);
    //EmitVertex();

    gl_Position = vec4(center1, 0.0, 1.0);
    //color = vec4(0.0);
    EmitVertex();    

    EndPrimitive(); 


}
]]>
    </program>
    <program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
  smooth vec4 color;
  flat float id;
  smooth float dist;
  //flat vec2 center;
} jit_in;

out vec4 color;

void main() {
  color = jit_in.color;
} 
]]>
    </program>
  </language>
</jittershader>
