<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="kernelTex" type="int" default="1" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="blur_amount" type="float" default="1.0" />
	<param name="sum" type="float" default="1" />
	<param name="kernelDim" type="vec2" state="TEXDIM1" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="kernelTex" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat" program="vp" />
		<bind param="blur_amount" program="fp" />
		<bind param="sum" program="fp" />
		<bind param="kernelDim" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;
uniform mat4 texMat;

out jit_PerVertex {
	vec2 uv;
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.uv = (texMat * vec4(uv,0,1)).xy;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core


layout (location = 0) out vec4 outColor;

uniform sampler2DRect tex0, kernelTex;
uniform float blur_amount, sum;
uniform vec2 kernelDim;

in jit_PerVertex {
	vec2 uv;
} jit_in;


void main(void) {

	outColor = vec4(0.0);
	vec2 halfKernelDim = kernelDim / 2;
	float weight;
	float tot_weight = 0;
	vec2 offset;

	for(int x = 0; x < kernelDim.x; x++){
		for(int y = 0; y < kernelDim.y; y++){
			weight = texelFetch(kernelTex, ivec2(x,y)).r;
			if(weight == 0.0) continue;
			tot_weight += weight;
			offset = blur_amount * vec2(float(x) - halfKernelDim.x, float(y) - halfKernelDim.y);
			outColor += texture(tex0, jit_in.uv + offset) * weight;
		}
	}

	outColor /= max(0.0001, tot_weight);
}
]]>
</program>
</language>
</jittershader>
