<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="line_width" type="float" default="1" />
	<param name="draw_mode" type="int" default="0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="line_width" program="fp" />
		<bind param="draw_mode" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core


in vec2 uv;

out jit_PerVertex {
	vec2 uv;
} jit_out;

uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0.0, 1.0);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform sampler2DRect tex0;
uniform float line_width;
uniform int draw_mode;

vec4 draw_lines(){

	float diag_width = line_width * 0.7071067812;

	if( texture(tex0, jit_in.uv - vec2(line_width,0)).r != texture(tex0, jit_in.uv + vec2(line_width,0)).r ){
		return vec4(1.0);
	}
	if( texture(tex0, jit_in.uv - vec2(0,line_width)).r != texture(tex0, jit_in.uv + vec2(0,line_width)).r ){
		return vec4(1.0);
	}
	if( texture(tex0, jit_in.uv - vec2(diag_width,diag_width)).r != texture(tex0, jit_in.uv + vec2(diag_width,diag_width)).r ){
		return vec4(1.0);
	}
	if( texture(tex0, jit_in.uv - vec2(-diag_width,diag_width)).r != texture(tex0, jit_in.uv + vec2(-diag_width,diag_width)).r ){
		return vec4(1.0);
	}
	return vec4(0.0);
}

vec4 draw_colors(){
	float id = texture(tex0, jit_in.uv - vec2(line_width,0)).r;
	return vec4( sin(vec3(id, id+1, id+2))*0.5 + 0.5, 1.0);
}

vec4 draw_id(){
	float id = texture(tex0, jit_in.uv - vec2(line_width,0)).r;
	return vec4(id,id,id,1);
}

vec4 draw_distance(){
	float distance = texture(tex0, jit_in.uv - vec2(line_width,0)).g;
	return vec4(distance,distance,distance,1);	
}

void main(void) {

	outColor = draw_mode == 0 ? draw_lines() : draw_mode == 1 ? draw_colors() : draw_mode == 2 ? draw_id() : draw_distance();
	
}
]]>
</program>
	</language>
</jittershader>
