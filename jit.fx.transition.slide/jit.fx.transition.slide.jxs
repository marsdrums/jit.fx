<jittershader name="default">
	<description>Default Slab </description>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="texMat0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="texMat1" type="mat4" state="TEXTURE1_MATRIX" />
  	<param name="slide" type="float" default="0.0" />
  	<param name="slidedir" type="int" default="0" />
	<language name="glsl" version="1.5">
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="uv" program="vp" />
		<bind param="texMat0" program="fp" />
		<bind param="texMat1" program="fp" />
    	<bind param="slide" program="fp" />
    	<bind param="slidedir" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec2 uv;

out jit_PerVertex {
	vec2 uv;
} jit_out;

void main(void) {
	gl_Position = vec4(uv*2 - 1, 0, 1);
	jit_out.uv = uv;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

layout (location = 0) out vec4 outColor;

uniform samplerJit0 tex0, tex1;
uniform mat4 texMat0, texMat1;
uniform float slide;
uniform int slidedir;

in jit_PerVertex {
	vec2 uv;
} jit_in;

void main(void) {

	vec2 offset = vec2(float(1 - slidedir), float(slidedir));
	vec2 uv = mod(jit_in.uv + slide*offset, vec2(2, 2));
	vec4 a = texture(tex0, vec2(texMat0 * vec4(uv, 0, 1)));
	vec4 b = texture(tex1, vec2(texMat1 * vec4(uv - offset, 0, 1)));
	outColor = uv[slidedir] < 1.0 ? a : b;

}
]]>
</program>
</language>
</jittershader>
